name: Test

on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest

    outputs:
      test-shard-matrix: ${{ steps.shards.outputs.test-shard-matrix }}

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            resources/definitions/os_detection/*.yaml

      - name: Calculate shards
        id: shards
        run: |
          cd resources/definitions/os_detection/

          declare -r SHARDS=8
          declare -A SHARD_GROUPS
          declare -i CURRENT_GROUP=1

          declare -a INPUT_FILES=(*.yaml)
          declare -r PER_SPLIT=$(( ${#INPUT_FILES[@]} / SHARDS ))
          declare -A FILE_LIST

          # Loop through each input file, extract the first two characters as the key,
          # and increment the count of files for each unique key in the FILE_LIST array.
          for FILE in "${INPUT_FILES[@]}"
          do
            KEY=${FILE:0:2}
            FILE_LIST[$KEY]=$(( ${FILE_LIST[$KEY]:-0} + 1 ))
          done

          # Bash cannot preserve the order of keys in associative arrays.
          # Sort the keys of the FILE_LIST array and store them in FILE_LIST_KEYS.
          readarray -t FILE_LIST_KEYS < <(printf '%s\n' "${!FILE_LIST[@]}" | sort)

          for KEY in "${FILE_LIST_KEYS[@]}"
          do
            (( GROUP_SIZE += ${FILE_LIST[$KEY]} ))
            SHARD_GROUPS[$CURRENT_GROUP]+="${KEY},"
            if [ $GROUP_SIZE -ge $PER_SPLIT ]
            then
              GROUP_SIZE=0
              (( CURRENT_GROUP++ ))
            fi
          done

          printf "test-shard-matrix=[" >> "$GITHUB_OUTPUT"

          printf '{"name":"Other", "php-version":"8.4", "database":"mariadb:11.7", "arguments":"--full --exclude-phpunit-group=browser,mibs,os"}, ' >> "$GITHUB_OUTPUT"

          for ((i=1;i<=${#SHARD_GROUPS[@]};i++)); do
            printf '{"name":"PHP 8.4 - OS (%i/%i)", "php-version":"8.4", "database":"mariadb:11.7", "arguments":"--os %s"}, ' $i ${#SHARD_GROUPS[@]} "${SHARD_GROUPS[$i]::-1}" >> "$GITHUB_OUTPUT"
          done

          for ((i=1;i<=${#SHARD_GROUPS[@]};i++)); do
            printf '{"name":"PHP 8.2 - OS (%i/%i)", "php-version":"8.2", "database":"mysql:8.0", "arguments":"--os %s"}, ' $i ${#SHARD_GROUPS[@]} "${SHARD_GROUPS[$i]::-1}" >> "$GITHUB_OUTPUT"
          done

          printf "]" >> "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"
  test:
    name: ${{ matrix.name }}
    needs: [setup]
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.setup.outputs.test-shard-matrix) }}

    services:
      database:
        image: ${{ matrix.database }}
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: librenms_phpunit_78hunjuybybh
          MYSQL_USER: librenms
          MYSQL_PASSWORD: librenms
        ports:
          - 3306
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: composer,php-cs-fixer
          coverage: none
      -
        name: Get composer cache directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      -
        name: Cache composer
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ secrets.CACHE_VERSION }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-${{ secrets.CACHE_VERSION }}-
      -
        name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ secrets.CACHE_VERSION }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ secrets.CACHE_VERSION }}-
      -
        name: Pip install
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade --user pylint python-memcached mysqlclient
      -
        name: Composer validate
        run: |
          composer validate
      -
        name: Init env
        run: |
          cat > .env <<EOL
          APP_KEY=base64:vHI+YHgkyCDad31iPEErGSNEOWO21wNzV+zyENKQv04=
          APP_URL=http://127.0.0.1:8000
          APP_ENV=testing
          DB_DRIVER=mysql
          DB_HOST=127.0.0.1
          DB_PORT=${{ job.services.database.ports[3306] }}
          DB_DATABASE=librenms_phpunit_78hunjuybybh
          DB_USERNAME=librenms
          DB_PASSWORD=librenms
          DB_TEST_DRIVER=mysql
          DB_TEST_HOST=127.0.0.1
          DB_TEST_PORT=${{ job.services.database.ports[3306] }}
          DB_TEST_DATABASE=librenms_phpunit_78hunjuybybh
          DB_TEST_USERNAME=librenms
          DB_TEST_PASSWORD=librenms
          EOL
      -
        name: Composer install
        run: |
          composer install --prefer-dist --no-interaction --no-progress
      -

        name: Snmpsim setup
        run: |
          php lnms dev:simulate --setup-venv
      -
        name: Copy seeded config
        run: cp "${GITHUB_WORKSPACE}/tests/testing_config.yaml" "${GITHUB_WORKSPACE}/database/seeders/config/"
      -
        name: Ensure MySQL is up
        env:
          PORT: ${{ job.services.database.ports[3306] }}
        run: |
          mysqladmin -h"127.0.0.1" -P"$PORT" --user=librenms --password=librenms ping --wait=5
      -
        name: Set MySQL authentication plugin
        if: matrix.database == 'mysql:8.0'
        env:
          PORT: ${{ job.services.database.ports[3306] }}
        run: |
          mysql -h"127.0.0.1" -P"$PORT" --user=root -e "ALTER USER 'librenms'@'%' IDENTIFIED WITH mysql_native_password BY 'librenms'"
      -
        name: Set MySQL collate
        env:
          PORT: ${{ job.services.database.ports[3306] }}
        run: |
          mysql -h"127.0.0.1" -P"$PORT" --user=librenms --password=librenms -e 'ALTER DATABASE librenms_phpunit_78hunjuybybh CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;'
      -
        name: Setup SQLite
        run: sqlite3 database/testing.sqlite ""

      -
        name: Migrate Database
        run: php artisan migrate

      -
        name: Start SNMPSIM
        run: |
          .python_venvs/snmpsim/bin/snmpsim-command-responder-lite --data-dir=tests/snmpsim --agent-udpv4-endpoint=127.1.6.2:1162 --log-level=error --logging-method=file:/tmp/snmpsimd.log &

      -
        name: lnms dev:check ci
        run: |
          php lnms dev:check ci ${{ matrix.arguments }}

      -
        name: Dump docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2

      -
        name: Dump snmp logs
        if: failure()
        run: |
          cat /tmp/snmpsimd.log || true

      -
        name: Dump context
        if: always()
        uses: crazy-max/ghaction-dump-context@v1
